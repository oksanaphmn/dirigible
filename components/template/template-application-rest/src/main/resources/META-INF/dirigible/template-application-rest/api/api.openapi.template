openapi: 3.0.3
info:
#if($openApiTitle)
  title: $openApiTitle - OpenAPI 3.0
#elseif($title)
  title: $title - OpenAPI 3.0
#else
  title: OpenAPI 3.0
#end
#if($openApiVersion)
  version: $openApiVersion
#else
  version: 1.0.0
#end
#if($openApiDescription)
  description: $openApiDescription
#elseif($description)
  description: $description
#else
  description: REST API generated from an EDM model
#end
#if($openApiTermsOfService)
  termsOfService: $openApiTermsOfService
#end
#if($openApiContactEmail || $openApiContactUrl)
  contact:
    name: API Support
  #if($openApiContactEmail)
    email: $openApiContactEmail
  #end
  #if($openApiContactUrl)
    url: $openApiContactUrl
  #end
#end
#if($openApiLicenseName && $openApiLicenseUrl)
  license:
    name: $openApiLicenseName
    url: $openApiLicenseUrl
#end
#if($openApiExternalDocsDescription && $openApiExternalDocsUrl)
externalDocs:
  description: $openApiExternalDocsDescription
  url: $openApiExternalDocsUrl
#else
externalDocs:
  description: Find out more about Eclipse Dirigible
  url: https://dirigible.io
#end
servers:
  - url: /services/ts
tags:
#foreach($model in $models)
  #if($model.type != "PROJECTION")
  - name: $model.perspectiveName
  #end
#end
paths:
#foreach($model in $models)
  #if($model.type != "PROJECTION")
  #set($hasStringProperty = "false")
  #foreach($property in $model.properties)
    #if($property.dataTypeJava == "string")
      #set($hasStringProperty = "true")
    #end
  #end
  /$projectName/gen/$genFolderName/api/$model.perspectiveName/${model.name}Service.ts:
    get:
      summary: List $model.name
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - $model.perspectiveName
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/$model.name'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create $model.name
      tags:
        - $model.perspectiveName
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/$model.name'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/$model.name'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /$projectName/gen/$genFolderName/api/$model.perspectiveName/${model.name}Service.ts/{id}:
    get:
      summary: Get $model.name by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - $model.perspectiveName
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/$model.name'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update $model.name by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - $model.perspectiveName
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/$model.name'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/$model.name'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete $model.name by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - $model.perspectiveName
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /$projectName/gen/$genFolderName/api/$model.perspectiveName/${model.name}Service.ts/count:
    get:
      summary: Count the number of $model.name
      tags:
        - $model.perspectiveName
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of $model.name by ${model.name}FilterOptions
      tags:
        - $model.perspectiveName
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/${model.name}FilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      $model.properties[0].name: 33
  #if($hasStringProperty == "true")
                    contains:
    #foreach($property in $model.properties)
      #if($property.dataTypeJava == "string")
                      $property.name: "abcd"
      #end
    #end
  #end
                    greaterThan:
                      $model.properties[0].name: 0
                    lessThanOrEqual:
                      $model.properties[0].name: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      $model.properties[0].name: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      $model.properties[0].name: 0
  #if($hasStringProperty == "true")
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
    #foreach($property in $model.properties)
      #if($property.dataTypeJava == "string")
                      $property.name: "abcd"
      #end
    #end
  #end
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      $model.properties[0].name: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      $model.properties[0].name: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      $model.properties[0].name: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      $model.properties[0].name: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /$projectName/gen/$genFolderName/api/$model.perspectiveName/${model.name}Service.ts/search:
    post:
      summary: Search ${model.name} by ${model.name}FilterOptions
      tags:
        - $model.perspectiveName
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/${model.name}FilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      $model.properties[0].name: 33
  #if($hasStringProperty == "true")
                    contains:
    #foreach($property in $model.properties)
      #if($property.dataTypeJava == "string")
                      $property.name: "abcd"
      #end
    #end
  #end
                    greaterThan:
                      $model.properties[0].name: 0
                    lessThanOrEqual:
                      $model.properties[0].name: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      $model.properties[0].name: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      $model.properties[0].name: 0
  #if($hasStringProperty == "true")
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
    #foreach($property in $model.properties)
      #if($property.dataTypeJava == "string")
                      $property.name: "abcd"
      #end
    #end
  #end
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      $model.properties[0].name: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      $model.properties[0].name: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      $model.properties[0].name: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      $model.properties[0].name: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/$model.name'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  #end
#end
components:
  schemas:
#foreach($model in $models)
  #if($model.type != "PROJECTION")
    #set($hasRequiredProperty = "false")
    #foreach($property in $model.properties)
      #if($property.isRequiredProperty)
        #set($hasRequiredProperty = "true")
      #end
    #end
    $model.name:
      type: object
    #if($hasRequiredProperty)
      required:
      #foreach($property in $model.properties)
        #if($property.isRequiredProperty)
        - ${property.name}
        #end
      #end
    #end
      properties:
    #foreach($property in $model.properties)
        $property.name:
        #if($property.dataTypeJava == "short" || $property.dataTypeJava == "int")
          type: integer
          format: int32
          #if($property.isCalculatedProperty)
          readOnly: true
          #end
        #elseif($property.dataTypeJava == "long")
          type: integer
          format: int64
          #if($property.isCalculatedProperty)
          readOnly: true
          #end
        #elseif($property.dataTypeJava == "float")
          type: number
          format: float
          #if($property.isCalculatedProperty)
          readOnly: true
          #end
        #elseif($property.dataTypeJava == "double")
          type: number
          format: double
          #if($property.isCalculatedProperty)
          readOnly: true
          #end
        #elseif($property.dataTypeJava == "string")
          type: string
          minLength: 0
          maxLength: $property.dataLength
          #if($property.widgetPattern)
          pattern: $property.widgetPattern
          #end
          #if($property.isCalculatedProperty)
          readOnly: true
          #end
        #elseif($property.dataTypeJava == "boolean")
          type: boolean
          #if($property.isCalculatedProperty)
          readOnly: true
          #end
        #elseif($property.dataTypeJava == "null")
          type: null
          #if($property.isCalculatedProperty)
          readOnly: true
          #end
        #end
    #end
    ${model.name}FilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
    #foreach($property in $model.properties)
                $property.name:
                  oneOf:
        #if($property.dataTypeJava == "short" || $property.dataTypeJava == "int")
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
        #elseif($property.dataTypeJava == "long")
                    - type: integer
                      format: int64
                    - type: array
                      items:
                        type: integer
                        format: int64
        #elseif($property.dataTypeJava == "float")
                    - type: number
                      format: float
                    - type: array
                      items:
                        type: number
                        format: float
        #elseif($property.dataTypeJava == "double")
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
        #elseif($property.dataTypeJava == "string")
                    - type: string
                      minLength: 0
                      maxLength: $property.dataLength
          #if($property.widgetPattern)
                      pattern: $property.widgetPattern
          #end
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: $property.dataLength
          #if($property.widgetPattern)
                        pattern: $property.widgetPattern
          #end
        #elseif($property.dataTypeJava == "boolean")
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
        #elseif($property.dataTypeJava == "null")
                    - type: null
                    - type: array
                      items:
                        type: null
        #end
    #end
            notEquals:
              type: object
              properties:
    #foreach($property in $model.properties)
                $property.name:
                  oneOf:
        #if($property.dataTypeJava == "short" || $property.dataTypeJava == "int")
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
        #elseif($property.dataTypeJava == "long")
                    - type: integer
                      format: int64
                    - type: array
                      items:
                        type: integer
                        format: int64
        #elseif($property.dataTypeJava == "float")
                    - type: number
                      format: float
                    - type: array
                      items:
                        type: number
                        format: float
        #elseif($property.dataTypeJava == "double")
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
        #elseif($property.dataTypeJava == "string")
                    - type: string
                      minLength: 0
                      maxLength: $property.dataLength
          #if($property.widgetPattern)
                      pattern: $property.widgetPattern
          #end
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: $property.dataLength
          #if($property.widgetPattern)
                        pattern: $property.widgetPattern
          #end
        #elseif($property.dataTypeJava == "boolean")
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
        #elseif($property.dataTypeJava == "null")
                    - type: null
                    - type: array
                      items:
                        type: null
        #end
    #end
            contains:
              type: object
              properties:
    #foreach($property in $model.properties)
                $property.name:
        #if($property.dataTypeJava == "string")
                  type: string
                  minLength: 0
                  maxLength: $property.dataLength
          #if($property.widgetPattern)
                  pattern: $property.widgetPattern
          #end
        #end
    #end
            greaterThan:
              type: object
              properties:
    #foreach($property in $model.properties)
                $property.name:
        #if($property.dataTypeJava == "short" || $property.dataTypeJava == "int")
                  type: integer
                  format: int32
        #elseif($property.dataTypeJava == "long")
                  type: integer
                  format: int64
        #elseif($property.dataTypeJava == "float")
                  type: number
                  format: float
        #elseif($property.dataTypeJava == "double")
                  type: number
                  format: double
        #elseif($property.dataTypeJava == "string")
                  type: string
                  minLength: 0
                  maxLength: $property.dataLength
          #if($property.widgetPattern)
                  pattern: $property.widgetPattern
          #end
        #end
    #end
            greaterThanOrEqual:
              type: object
              properties:
    #foreach($property in $model.properties)
                $property.name:
        #if($property.dataTypeJava == "short" || $property.dataTypeJava == "int")
                  type: integer
                  format: int32
        #elseif($property.dataTypeJava == "long")
                  type: integer
                  format: int64
        #elseif($property.dataTypeJava == "float")
                  type: number
                  format: float
        #elseif($property.dataTypeJava == "double")
                  type: number
                  format: double
        #elseif($property.dataTypeJava == "string")
                  type: string
                  minLength: 0
                  maxLength: $property.dataLength
          #if($property.widgetPattern)
                  pattern: $property.widgetPattern
          #end
        #end
    #end
            lessThan:
              type: object
              properties:
    #foreach($property in $model.properties)
                $property.name:
        #if($property.dataTypeJava == "short" || $property.dataTypeJava == "int")
                  type: integer
                  format: int32
        #elseif($property.dataTypeJava == "long")
                  type: integer
                  format: int64
        #elseif($property.dataTypeJava == "float")
                  type: number
                  format: float
        #elseif($property.dataTypeJava == "double")
                  type: number
                  format: double
        #elseif($property.dataTypeJava == "string")
                  type: string
                  minLength: 0
                  maxLength: $property.dataLength
          #if($property.widgetPattern)
                  pattern: $property.widgetPattern
          #end
        #end
    #end
            lessThanOrEqual:
              type: object
              properties:
    #foreach($property in $model.properties)
                $property.name:
        #if($property.dataTypeJava == "short" || $property.dataTypeJava == "int")
                  type: integer
                  format: int32
        #elseif($property.dataTypeJava == "long")
                  type: integer
                  format: int64
        #elseif($property.dataTypeJava == "float")
                  type: number
                  format: float
        #elseif($property.dataTypeJava == "double")
                  type: number
                  format: double
        #elseif($property.dataTypeJava == "string")
                  type: string
                  minLength: 0
                  maxLength: $property.dataLength
          #if($property.widgetPattern)
                  pattern: $property.widgetPattern
          #end
        #end
    #end
        $select:
          type: array
          example: [#foreach($property in $model.properties)"$property.name"#if($foreach.hasNext), #end#end]
          items:
            type: string
        $sort:
          - type: string
            example: "#foreach($property in $model.properties)$property.name#if($foreach.hasNext),#end#end"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
  #end
#end
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string