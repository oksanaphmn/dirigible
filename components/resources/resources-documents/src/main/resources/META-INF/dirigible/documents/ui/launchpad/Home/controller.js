/*
 * Copyright (c) 2024 Eclipse Dirigible contributors
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-FileCopyrightText: Eclipse Dirigible contributors
 * SPDX-License-Identifier: EPL-2.0
 */
/*
 * Generated by Eclipse Dirigible based on model and template.
 *
 * Do not modify the content as it may be re-generated again.
 */
angular.module('page', ["ideUI", "ideView", "entityApi"])
	.config(["messageHubProvider", function (messageHubProvider) {
		messageHubProvider.eventIdPrefix = 'portal.launchpad.Home';
	}])
	.config(["entityApiProvider", function (entityApiProvider) {
		entityApiProvider.baseUrl = "/services/js/portal/ui/launchpad/Home/tiles.js";
	}])
	.controller('PageController', ['$scope', 'messageHub', 'entityApi', function ($scope, messageHub, entityApi) {

		$scope.openView = function (location) {
			messageHub.postMessage("openView", {
				location: location
			});
		}

		entityApi.list().then(function (response) {
			if (response.status != 200) {
				messageHub.showAlertError("Home", `Unable to get Home Launchpad: '${response.message}'`);
				return;
			}
			$scope.groups = response.data;

			$scope.groups = $scope.groups.filter(group => (group.name !== 'Reports'));
			$scope.groups = $scope.groups.sort((a, b) => a.name.localeCompare(b.name));
			$scope.settings = [];
			$scope.groups.forEach(group => group.tiles.forEach(tile => $scope.settings.push(tile)));
			$scope.groups.forEach(group => {
				let caption = group.name;
				caption = caption.substring(caption.indexOf('-') ? caption.indexOf('-') + 1 : 0);
				group.name = caption.slice(0, 1).toUpperCase() + caption.slice(1, caption.length);
			});
			$scope.settings = $scope.settings.filter(tile => tile.type === 'SETTING');
			$scope.settings = $scope.settings.sort((a, b) => a.name.localeCompare(b.name));
			$scope.groups = $scope.groups.filter(group => (group.tiles.filter(tile => tile.type === 'PRIMARY')).length > 0);
		});
	}]);
